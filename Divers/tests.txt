/!\ ne pas avoir de message apres le dernier repas ou mort /!\
/!\ ne utiliser la fonction exit() ou kill() hors bonus /!\


./philo number_of_philosophers 
		time_to_die
		time_to_eat
		time_to_sleep
		[number_of_times_each_philosopher_must_eat]

-fsanitize=thread 
	est le flag de compilation qu'il te faut utiliser pour être sûr de ne pas avoir de race
	attention a ne pas utiliser valgrind en meme temps sinon conflit

CFLAGS = -Wall -Werror -Wextra -pthread -g -fsanitize=thread
	-> je peux utiliser ces differents flags de compil plus efficace que Valgrind.

valgrind --leak-check=full --show-leak-kinds=all --fair-sched=yes --tool=helgrind ./philo X X X X X

a tester :

./philo 1 800 200 200						==>	OK PAS DE LEAKS
	-> doit mourir, pas de repas

./philo 5 800 200 200
	-> boucle infini

./philo 5 800 200 200 7						==>	OK PAS DE LEAKS
	-> stop apres 7 repas

./philo 4 410 200 200
	-> boucle infini

./philo 5 310 200 100						==>	OK PAS DE LEAKS
	-> 1 mort

./philo 2 310 200 100						==>	OK PAS DE LEAKS
	-> a 10ms max, meme temps que pour 4 philos

./philo 4 310 200 100						==>	OK PAS DE LEAKS
	-> a 10ms max, meme temps que pour 2 philos

./philo 4 310 200 100 00					==>	OK PAS DE LEAKS
	-> 0 repas,
	/!\ attention verifier si le double 0 est géré /!\

./philo 5 310 200 100
	-> 1 mort

./philo 4 310 200 100 -10					==>	OK PAS DE LEAKS
	-> rien

./philo 4 310 200 100 fsdfs0				==>	OK PAS DE LEAKS
	-> rien

./philo 200 300 1 1
	-> boucle infini

./philo 200 300 1 1 2
	-> 400 repas (attention parfois tout ne peux pas s afficher dans le terminal car trop long)

./philo 200 1 1 1			/!\ si pas opti	affichage des actions apres died /!\
	-> died

./philo 200 100 90 10 1		/!\	hyper dur, doit ettre super opti /!\
	-> 200 repas

./philo 200 2147483648 89 10
	-> overflow d un int doit etre protegé

./philo 200 2147483647 89 10
	-> doit s executer car pas de overflow

./philo 30 2000 100 100
	-> a regarder dans le visualizer, ne doit pas se chevaucher 
	-> https://nafuka11.github.io/philosophers-visualizer/

./philo 4 401 200 200		/!\	hyper dur, doit ettre super opti /!\
	-> boucle infini 

 ./philo 2 400 100 5600
	-> verifier que le philo meurt a 410 max (ideal 400). Si meurt a 5600 FAUX 
	solution peut etre de mettre plein de usleep petit lors des actions

./philo 5 620 200 200 7 | grep eating | wc -l
	-> permet de verif si tous les repas sont pris

/!\ TEST UTLITME POUR CASSER /!\
repeat 100 ./philo 200 1 1 1 | grep died -A100
	-> ne doit afficher que des died sinon ca veut dire que e prog ne s arrete pas bien









/*************************************************/
mettre message erruer pour 0 
faire 1 thread pour 1 philo
faire afficher la mort au bon moment 

faire un truc genre :
void ft_usleep(int time_usleep)
{
	int start = gettime();

	while(start + time_usleep > get_time && check_time_for_philo_to_die())
		usleep(100);
}